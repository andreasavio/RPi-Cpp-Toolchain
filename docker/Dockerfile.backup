# Ubuntu 18.04 at the time of writing (2019-04-19)
FROM ubuntu:latest as ct-ng

# Install some tools and compilers + clean up
RUN apt-get update && \
    apt-get install -y sudo git wget \
                       gcc g++ cmake make autoconf automake \
                       gperf diffutils bzip2 xz-utils \
                       flex gawk help2man libncurses-dev patch bison \
                       python-dev gnupg2 texinfo unzip libtool-bin && \
    apt-get clean autoclean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Add a user called `develop`
RUN useradd -m develop && echo "develop:develop" | chpasswd && adduser develop sudo

USER develop
WORKDIR /home/develop

ENV CROSSTOOL_NG_VERSION=1.24.0
RUN git clone https://github.com/crosstool-ng/crosstool-ng.git
WORKDIR /home/develop/crosstool-ng
RUN git checkout crosstool-ng-${CROSSTOOL_NG_VERSION}
RUN ./bootstrap
RUN ./configure --prefix=/home/develop/.local
RUN make -j$(($(nproc) * 2))
RUN make install
ENV PATH=/home/develop/.local/bin:$PATH

RUN mkdir /home/develop/RPi3
WORKDIR /home/develop/RPi3
# COPY --chown=develop:develop config .config
# RUN ls -al
RUN ct-ng aarch64-rpi3-linux-gnu
RUN sed -i 's/CT_GCC_VERSION=\"[0-9.]*\"/CT_GCC_VERSION="9.1.0"/g' .config
RUN ct-ng build && rm -rf .build

ENV TOOLCHAIN_PATH=/home/develop/x-tools/aarch64-rpi3-linux-gnu
ENV PATH=${TOOLCHAIN_PATH}/bin:$PATH

################################################################################

FROM ct-ng as build

# Download OpenCV
WORKDIR /home/develop
RUN wget -O opencv-4.1.0.tar.gz https://codeload.github.com/opencv/opencv/tar.gz/4.1.0
RUN tar -xf opencv-4.1.0.tar.gz && rm opencv-4.1.0.tar.gz
RUN mv opencv-4.1.0 opencv

RUN mkdir RPi3-sysroot
RUN cp -r $TOOLCHAIN_PATH/aarch64-rpi3-linux-gnu/sysroot/* ~/RPi3-sysroot/

# Build OpenCV ARM
RUN mkdir /home/develop/opencv-RPi3-build
WORKDIR /home/develop/opencv-RPi3-build
RUN cmake \
        -DCMAKE_TOOLCHAIN_FILE=../opencv/platforms/linux/arm.toolchain.cmake \
        -DCMAKE_SYSROOT=$HOME/RPi3-sysroot \
        -DGNU_MACHINE="aarch64-rpi3-linux-gnu" \
        -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
        -DWITH_V4L=ON -DWITH_LIBV4L=ON \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo \
        -DCMAKE_INSTALL_PREFIX=$HOME/RPi3-sysroot/usr \
        ../opencv
RUN make -j$(($(nproc) * 2))
RUN chmod -R u+w /home/develop/RPi3-sysroot
RUN ls -al /home/develop/RPi3-sysroot/usr/share
RUN make install
RUN rm -rf /home/develop/opencv-arm-build

# Install zbar
WORKDIR /home/develop
RUN ls
RUN wget http://downloads.sourceforge.net/project/zbar/zbar/0.10/zbar-0.10.tar.bz2 && \
    tar xjf zbar-0.10.tar.bz2 && rm zbar-0.10.tar.bz2


USER root
RUN apt-get update && \
    apt-get install -y autogen autoconf libtool automake m4 gettext pkg-config && \
    apt-get clean autoclean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*
USER develop

WORKDIR /home/develop
RUN mkdir zbar-0.10/build-arm
WORKDIR /home/develop/zbar-0.10
# New autoconf gives an error
RUN sed -i 's/-Werror //g' configure.ac
# Original autoconf doesn't know aarch64, so run again with newer autoconf
RUN autoreconf --install --force
WORKDIR /home/develop/zbar-0.10/build-arm

RUN ../configure \
        --disable-video --without-imagemagick --without-gtk --without-python \
        --without-qt --without-jpeg \
        --host="aarch64-linux-gnu" \
        --prefix="$HOME/RPi3-sysroot/usr" \
        CFLAGS="-O2" \
        CC="aarch64-rpi3-linux-gnu-gcc --sysroot=$HOME/RPi3-sysroot" \
        CXX="aarch64-rpi3-linux-gnu-g++ --sysroot=$HOME/RPi3-sysroot" \
        LD="aarch64-rpi3-linux-gnu-ld --sysroot=$HOME/RPi3-sysroot"
RUN make -j$(($(nproc) * 2))
RUN make install
RUN rm -rf /home/develop/zbar-0.10/build-arm

# # LibJPEG
# WORKDIR /home/develop
# RUN wget https://ijg.org/files/jpegsrc.v9c.tar.gz
# RUN tar xzf jpegsrc.v9c.tar.gz && rm jpegsrc.v9c.tar.gz
# RUN mkdir jpeg-9c/build-arm
# WORKDIR /home/develop/jpeg-9c/build-arm
# RUN ../configure \
#         --host="aarch64-linux-gnu" \
#         --prefix="$HOME/RPi3-sysroot/usr" \
#         CFLAGS="-O2" \
#         CC="aarch64-rpi3-linux-gnu-gcc --sysroot=$HOME/RPi3-sysroot" \
#         CXX="aarch64-rpi3-linux-gnu-g++ --sysroot=$HOME/RPi3-sysroot" \
#         LD="aarch64-rpi3-linux-gnu-ld --sysroot=$HOME/RPi3-sysroot"
# RUN make -j$(($(nproc) * 2))
# RUN make install
# 
# # Zlib
# WORKDIR /home/develop
# RUN wget https://downloads.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz
# RUN tar xzf zlib-1.2.11.tar.gz && rm zlib-1.2.11.tar.gz
# 
# RUN mkdir zlib-1.2.11/build-arm
# WORKDIR /home/develop/zlib-1.2.11/build-arm
# RUN ../configure --help
# RUN CFLAGS="-O2" \
#     CC="aarch64-rpi3-linux-gnu-gcc --sysroot=$HOME/RPi3-sysroot" \
#     LD="aarch64-rpi3-linux-gnu-ld --sysroot=$HOME/RPi3-sysroot" \
#     ../configure \
#         --prefix="$HOME/RPi3-sysroot/usr"
#     
# RUN make -j$(($(nproc) * 2))
# RUN make install
# 
# # LibPNG
# WORKDIR /home/develop
# RUN wget https://netcologne.dl.sourceforge.net/project/libpng/libpng16/1.6.37/libpng-1.6.37.tar.gz
# RUN tar xzf libpng-1.6.37.tar.gz && rm libpng-1.6.37.tar.gz
# 
# RUN mkdir libpng-1.6.37/build-arm
# WORKDIR /home/develop/libpng-1.6.37/build-arm
# RUN ../configure \
#         --host="aarch64-linux-gnu" \
#         --prefix="$HOME/RPi3-sysroot/usr" \
#         CFLAGS="-O2" \
#         CC="aarch64-rpi3-linux-gnu-gcc --sysroot=$HOME/RPi3-sysroot" \
#         CXX="aarch64-rpi3-linux-gnu-g++ --sysroot=$HOME/RPi3-sysroot" \
#         LD="aarch64-rpi3-linux-gnu-ld --sysroot=$HOME/RPi3-sysroot"
# RUN make -j$(($(nproc) * 2))
# RUN make install

# TBB
# WORKDIR /home/develop
# RUN wget -O tbb.tar.gz https://codeload.github.com/intel/tbb/tar.gz/2019_U8
# RUN tar xzf tbb.tar.gz && rm tbb.tar.gz
# 
# WORKDIR /home/develop/tbb-2019_U8
# RUN CFLAGS="-O2" \
#     CC="aarch64-rpi3-linux-gnu-gcc --sysroot=$HOME/RPi3-sysroot" \
#     CXX="aarch64-rpi3-linux-gnu-g++ --sysroot=$HOME/RPi3-sysroot" \
#     LD="aarch64-rpi3-linux-gnu-ld --sysroot=$HOME/RPi3-sysroot" \
#     make arch=aarch64